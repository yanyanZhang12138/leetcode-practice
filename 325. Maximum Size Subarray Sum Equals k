Given an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

 

Example 1:

Input: nums = [1,-1,5,-2,3], k = 3
Output: 4-
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example 2:

Input: nums = [-2,-1,2,1], k = 1
Output: 2
Explanation: The subarray [-1, 2] sums to 1 and is the longest.

class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        Map<Integer,Integer> hm = new HashMap<>();
        hm.put(0, -1);
        int res= 0, sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum+=nums[i];
            if(hm.containsKey(sum-k)) res = Math.max(i-hm.get(sum-k), res);
            if(!hm.containsKey(sum)) hm.put(sum,i);
        }
        return res;
    }
}
It took me more than an hour to understand how this solution worked. In particular, I was confused about what the map.containsKey(sum - k) was getting, so for those who are also confused, here's an explanation:

Let's say you've iterated to index 5 (randomly chosen) and your sum from index 0 to 5 so far is 7, and k is 3. sum - k in this case is 4.

What map.containsKey(sum - k) returns is the index where the sum of every element up to that index from index 0 is sum - k, or (7 - 4) == 3, in our example. Let's say that that index returned by map.containsKey(sum - k) is 2 (randomly chose one that is before index 5). So knowing that at index 2 the total sum is 4, and at index 5, the total sum is 7, that means the elements between index 2 and index 5 incremented the total sum by 3, or k!


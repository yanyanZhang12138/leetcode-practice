In an array A of 0s and 1s, how many non-empty subarrays have sum S?

 

Example 1:

Input: A = [1,0,1,0,1], S = 2
Output: 4
Explanation: 
The 4 subarrays are bolded below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
 

Note:

A.length <= 30000
0 <= S <= A.length
A[i] is either 0 or 1.

class Solution {
    public int numSubarraysWithSum(int[] A, int S) {
        return atMost(A, S) - atMost(A, S-1);
    }
    public int atMost(int[] A, int S){
        if(S < 0) return 0;
        int count = 0, start = 0, end = 0, sum = 0;
        while(end < A.length){
            sum += A[end];
            
            while(sum > S){
                sum -=A[start++];
            }
            count += end- start + 1;
            end++;

            }
            return count;
    }
        
    }


76. Minimum Window Substring
Hard

6217

421

Add to List

Share
Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string "".

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Example 2:

Input: s = "a", t = "a"
Output: "a"


class Solution {
    public String minWindow(String s, String t) {
        int[] map = new int[128];
        for(char c:t.toCharArray()){
            map[c]++;
        }
        int start = 0, end = 0, minStart = 0, minSum = Integer.MAX_VALUE, counter = t.length();
        while(end < s.length()){
            final char c1 = s.charAt(end);
            if(map[c1] > 0) counter--;
            map[c1]--;
            end++;
            while(counter == 0){
                if(minSum > end-start){
                    minSum = end-start;
                    minStart = start;
                }
                final char c2 = s.charAt(start);
                map[c2]++;
                if(map[c2] > 0) counter++;
                start++;
            }
        }
        return minSum == Integer.MAX_VALUE ? "":s.substring(minStart, minStart+minSum);
    }
}

template:
Longest Substring - at most K distinct characters
public int lengthOfMaxSubstringKDistinct(String s, int k){
    int[] map = new int[256];
    int start = 0, end = 0, maxLen = Integer.MIN_VALUE, counter = 0;
    while(end < s.length){
        final char c1 = s.CharAt(end);
        if(map[c1] == 0)  counter++;
        map[c1]++;
        end++;
        while(counter > k){
            final char c2 = s.CharAt(start);
            if(map[c2] == 1) counter--;
            map[c2]--;
            start++;
        }
        
        maxLen = Math.max(maxLen, end-start);
    }
    return maxLen;
}

Longest substring - withou repeated characters
public int lengthOfMaxSubstring2(String s){
    int[] map = new int[256];
    int start = 0, end = 0, maxLen = Integer.MIN_VALUE, counter = 0;
    while(end < s.length){
        final char c1 = s.CharAt(end);
        if(map[c1] > 0) counter++;
        map[c1]++;
        end++;
        
        while(counter > 0){
            final char c2 = s.CharAt(start);
            if(map[c2] > 1) counter--;
            map[c2]--;
            start++;
        }
        maxLen = Math.max(maxLen, end-start);
    }
}

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109、

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res;
        res = new int[]{-1, -1};
        if(nums == null || nums.length == 0){
            return res;
        }
        int start = 0, n = nums.length, end = n-1, mid = 0;
        while(start < end){
            mid = start + (end-start)/2;
            if(target > nums[mid]){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
        if(target == nums[start]){
            res[0] = start;
        }else{
            res[0] = -1;
        }
        
        end = n - 1;
        while(start < end){
            mid = start + (end-start)/2 + 1;
            if(target < nums[mid]){
                end = mid - 1;
            }else{
                start = mid;
            }
        }
        if(target == nums[end]){
            res[1] = end;
        }else{
            res[1] = -1;
        }
        
        return res;
    }
    
}
